RxJava2.x 创建被观察者的几种方式：
    Observable<T>：能够发射 0 或 n 个数据，并以成功或错误事件终止

    Flowable<T>：能够发射 0 或 n 个数据，并以成功或错误事件终止。 支持 Backpressure，即控制数据源发射的速度

    Single<T>：只发射单个数据或错误事件，即只有 onSuccess（用于发送数据） 或 onError 事件
        Single.create(new SingleOnSubscribe<String>() {
            @Override
            public void subscribe(@NonNull SingleEmitter<String> e) throws Exception {
                e.onSuccess("test");
            }
        }).subscribe(new BiConsumer<String, Throwable>() {
           @Override
           public void accept(String s, Throwable throwable) throws Exception {
               System.out.println(s);
           }
        });

    Completable<T>：它从来不发射数据，只处理 onComplete 和 onError 事件。可以看成是Rx的Runnable
        Completable.create(new CompletableOnSubscribe() {
            @Override
            public void subscribe(@NonNull CompletableEmitter emitter) throws Exception {
                try {
                    TimeUnit.SECONDS.sleep(1);
                    emitter.onComplete();
                } catch (InterruptedException e) {
                    emitter.onError(e);
                }
            }
        }).andThen(Observable.range(1, 10))
        .subscribe(new Consumer<Integer>() {
            @Override
            public void accept(@NonNull Integer integer) throws Exception {
                System.out.println(integer);
            }
        });

    Maybe<T>：能够发射 0 或者 1 个数据，要么成功，要么失败。有点类似于 Optional